<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Dbconnection_ConnectionString" xml:space="preserve">
    <value><![CDATA[Controls how an open connection is established.]]></value>
  </data>
  <data name="DbConnection_Database" xml:space="preserve">
    <value><![CDATA[The database qualifier used by this connection]]></value>
  </data>
  <data name="DbConnection_Datasource" xml:space="preserve">
    <value><![CDATA[The name of the database server to which to connect.]]>     
    </value>
  </data>
  <data name="DbConnection_ServerVersion" xml:space="preserve">
    <value><![CDATA[Version of the HSQLDB Engine accessed by this Connection.]]></value>
  </data>
  <data name="DbConnection_State" xml:space="preserve">
    <value><![CDATA[The state of this connection.]]></value>
  </data>
  <data name="DbConnectionString_AutoShutdown" xml:space="preserve">
    <value><![CDATA[Controls whether an embedded database instance is shut down automatically.
        
When true, the database instance will shut down automatically
when the number of open connections transitions from one (1)
to zero (0); otherwise, the database instance remains open
until an explicit:

     SHUTDOWN [IMMEDIATELY|COMPACT|SCRIPT]
     
command is issued or the hosting process terminates.

This property must be specified by the connection that opens
the database;it is ignored in subsequent connections.

Applies only to embedded mode (i.e. File, Res and Mem protocol)
connections.]]></value>
  </data>
  <data name="DbConnectionString_CacheFileScale" xml:space="preserve">
    <value><![CDATA[Specifies the byte alignment of table data image used on disk.

Allowable values are 1 (default) or 8.

Setting this value to 8 specifies that record offsets are
specified in 8 byte rather than the default 1 byte quanta,
allowing the table data image on disk to grow to a larger 
maximum size (~8 GB) than the default (~2 GB).

This value must be set on a new database instance before any
disk-based (CACHED) tables are created; or the affected database
instance must be shut down using the "SHUTDOWN SCRIPT" command
and restarted before the setting will take effect.

This property must be specified by the connection that
opens the database; it is ignored in subsequent connections.

Applies only to File protocol connections.]]></value>
  </data>
  <data name="DbConnectionString_CacheScale" xml:space="preserve">
    <value><![CDATA[Controls the maximum number of rows from disk that the
buffer manager will allow to be cached in memory.

The maximum number is computed as <code>~3*(cache scale**2)</code>.

The default value is <b>14</b> (~49152 rows).

The recognized range is 8-18 min/max.

Supplied values are automatically limited to min/max.

This property must be specified by the connection that
opens the database; it is ignored in subsequent connections.

Applies only to file: protocol connections.]]></value>
  </data>
</root>