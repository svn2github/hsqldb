#region licence

/* Copyright (c) 2001-2009, The HSQL Development Group
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the HSQL Development Group nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL HSQL DEVELOPMENT GROUP, HSQLDB.ORG,
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#endregion

#region Using

using System;
using System.Collections;
using System.ComponentModel;
using System.Collections.Generic;

#endregion

namespace System.Data.Hsqldb.Common
{
    #region HsqlDataSourceExceptionCollection

    /// <summary>
    /// <para>
    /// Collects all errors generated by the Data Provider for
    /// the HSQLDB Database Engine.
    /// </para> 
    /// <img src="../Documentation/ClassDiagrams/System.Data.Hsqldb.Common.HsqlDataSourceExceptionCollection.png"
    ///      alt="HsqlDataSourceExceptionCollection Class Diagram"/>
    /// </summary>
    /// <author name="boucherb@users"/>
    [Serializable, ListBindable(false)]
    public sealed class HsqlDataSourceExceptionCollection
        : ICollection, IEnumerable
    {

        #region Fields
        private List<HsqlDataSourceException> m_exceptions;
        #endregion

        #region Constructors

        #region HsqlDataSourceExceptionCollection()
        /// <summary>
        /// Constructs a new <c>HsqlDataSourceExceptionCollection</c> instance.
        /// </summary>
        internal HsqlDataSourceExceptionCollection()
        {
            m_exceptions = new List<HsqlDataSourceException>();
        }
        #endregion 

        #endregion

        #region Methods

        #region Add(HsqlDataSourceException)
        /// <summary>
        /// Adds the specified exception.
        /// </summary>
        /// <param name="ex">The exception to add.</param>
        internal void Add(HsqlDataSourceException ex)
        {
            m_exceptions.Add(ex);
        }
        #endregion

        #region CopyTo(HsqlDataSourceException[],int)
        /// <summary>
        /// Copies the elements of this collection into an array of
        /// <see cref="HsqlDataSourceException"/>, starting at the specified index.
        /// </summary>
        /// <param name="array">
        /// The array of <see cref="HsqlDataSourceException"/> into which to copy the elements.
        /// </param>
        /// <param name="index">
        /// The index into the array at which to start copying.
        /// </param>
        /// <exception cref="System.ArgumentException">
        /// When sum of index and the number of elements in this
        /// collection is greater than the <see cref="System.Array.Length"/>
        /// of the target array.
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// The array is null.
        /// </exception>
        /// <exception cref="System.ArgumentOutOfRangeException">
        /// The index is not valid for array.
        /// </exception>
        public void CopyTo(HsqlDataSourceException[] array, int index)
        {
            m_exceptions.CopyTo(array, index);
        }
        #endregion

        #region CopyTo(Array,int)
        /// <summary>
        /// Copies the elements of the this collection/ into an <see cref="System.Array"/>,
        /// starting at the specified index.
        /// </summary>
        /// <param name="array">
        /// The <see cref="System.Array"/> into which to copy the elements.
        /// </param>
        /// <param name="index">
        /// The index into the given array at which to start copying.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// When the array is null.
        /// </exception>
        /// <exception cref="System.ArgumentOutOfRangeException">
        /// When the index is not valid for the array.
        /// </exception>
        /// <exception cref="System.ArgumentException">
        /// When the sum of index and the number of elements in this
        /// collection is greater than the <see cref="System.Array.Length"/>
        /// of the <see cref="System.Array"/>.
        /// </exception>
        /// <filterpriority>2</filterpriority>
        public void CopyTo(Array array, int index)
        {
            ((IList)m_exceptions).CopyTo(array, index);
        }
        #endregion

        #region GetEnumerator()
        /// <summary>
        /// Supports the .NET Framework infrastructure and is not
        /// intended to be used directly from code
        /// </summary>
        /// <returns>
        /// An <see cref="IEnumerator"/>.
        /// </returns>
        public IEnumerator GetEnumerator()
        {
            return m_exceptions.GetEnumerator();
        }
        #endregion 
        
        #endregion

        #region Properties

        #region Count
        /// <summary>
        /// Retrieves the number of elements in this collection
        /// </summary>
        /// <returns>
        /// The total number of elements in the collection
        /// </returns>
        public int Count
        {
            get { return m_exceptions.Count; }
        }
        #endregion 

        #endregion

        #region Indexers

        #region this[int]
        /// <summary>
        /// Retrieves the element at the specified index.
        /// </summary>
        /// <returns>
        /// The <see cref="HsqlDataSourceException"/> at the specified index
        /// </returns>
        /// <param name="index">
        /// The zero-based index of the element to retrieve.
        /// </param>
        /// <exception cref="IndexOutOfRangeException">
        /// When the index parameter is outside the indexable
        /// bounds of this collection.
        /// </exception>
        public HsqlDataSourceException this[int index]
        {
            get { return m_exceptions[index]; }
        }
        #endregion

        #endregion

        #region Explicit ICollection Member Implementations

        #region ICollection.IsSynchronized
        /// <summary>
        /// Gets a value indicating whether access to this
        /// collection is synchronized (thread safe).
        /// </summary>
        /// <value>
        /// <c>true</c> if access is synchronized (thread safe);
        /// otherwise, <c>false</c>.</value>
        bool ICollection.IsSynchronized
        {
            get { return ((ICollection)m_exceptions).IsSynchronized; }
        }
        #endregion

        #region ICollection.SyncRoot
        /// <summary>
        /// Gets an object that can be used to synchronize
        /// access to this collection.
        /// </summary>
        /// <value>
        /// An object that can be used to synchronize
        /// access to this collection.
        /// </value>
        object ICollection.SyncRoot
        {
            get { return ((ICollection)m_exceptions).SyncRoot; }
        }
        #endregion 
        
        #endregion
    } 
    
    #endregion
}

