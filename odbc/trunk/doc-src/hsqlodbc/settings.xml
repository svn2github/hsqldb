<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->

<!DOCTYPE book [
  <!ENTITY % dummy22 SYSTEM "../entities/global.ent"> %dummy22;
]>

<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="settings-chapt"
      xmlns:xi="http://www.w3.org/2001/XInclude">
  <!-- We declare the default namespace + those for prefixes xlink: and xi: in
       the root element, so we can use them anywhere in this file. -->

  <info>
    <title xml:id="settings-title">Driver Settings</title>
    <author>
      <personname><firstname>Blaine</firstname>
      <surname>Simpson</surname></personname>

      <affiliation>
        <orgname>The HSQL Development Group</orgname>
      </affiliation>
    </author>

    <releaseinfo>$Revision$</releaseinfo>

    <pubdate>$Date$</pubdate>

    <keywordset>
      <keyword>HSQLDB</keyword>

      <keyword>HyperSQL</keyword>

      <keyword>ODBC</keyword>
    </keywordset>
  </info>

  <simpara><remark>For some reason, attempts to screen-shot the DSN config
    screens fail with a Windows system error on Vista.
    Perhaps security-related.
    TODO:  Try on XP.
  </remark></simpara>
  <simpara>
    This chapter applies to both UNIX and Windows.
    The setting heading includes the descriptive name as shown by the
    Windows ODBC DS Administrator, as well as the real keyword names that UNIX
    users will use.
  </simpara> <simpara>
    The HyperSQL ODBC Driver product consists of two driver variants.
    You should try to use the <emphasis>Unicode</emphasis> variant first, since
    it supports the later and better ODBC protocol.
    Use the <emphasis>ANSI</emphasis> variant if the Unicode variant won't
    work for your application.
    The way you select the driver variant for a DSN is platform-specific.
    For UNIX, set the DSN setting <literal>Driver</literal> to the key as
    defined in the uniXODBC config file
    <filename>/etc/unixODBC/odbcinst.ini</filename>.
    For UNIX, select the driver after you click <guilabel>Add</guilabel> on
    the <guilabel>User DSN</guilabel> screen, or switch it afterwards with the
    DSN's <guilabel>Manage DSN</guilabel> button.
  </simpara> <para>
    Driver settings can also be made at connection time by just appending
    keyword abbreviation/value assignment pairs to the ODBC connection string,
    delimiting each such pair with a semicolon.  Base connection Strings are
    language-dependent, but you always append a String in this form
    <informalexample>
      <programlisting>;A0=0;B9=1</programlisting></informalexample>
    See the <link xlink:href="#settings-app" endterm="settings-app-title"/>
    appendix for a concise list of the abbreviations you may use.
    The appendix also shows the default values for settings (this is really
    only necessary for UNIX users, since the Winodws DSN manager always shows
    the current effective value).
  </para>
  <variablelist><title>Runtime Driver Settings</title>
    <varlistentry><term>Database</term><listitem><simpara>
      ODBC does not allow an empty string for a DSM database name.  Therefore,
      you must specify DSN database name of "/" (without the quotes) to
      indicate the default database
    </simpara></listitem></varlistentry>
    <varlistentry><term>Recognize Unique Indexes</term><listitem><simpara>
    </simpara></listitem></varlistentry>
    <varlistentry><term>Cancel as FreeeStmt</term><listitem><simpara>
      <remark>Find out what this experimental feature is for.</remark>
    </simpara></listitem></varlistentry>
    <varlistentry><term>MyLog</term><listitem><simpara>
      Enables fairly verbose runtime logging to the indicated file.
      With value 1 will write coded mylog() messages to the MyLog file.
      With value 2 will write both mylog() and inolog() messages to MyLog file.
    </simpara></listitem></varlistentry>
    <varlistentry><term>CommLog</term><listitem><simpara>
      Enables runtime communiction logging to the indicated file.
      With value 1, will write coded qlog() messages to the CommLog.
    </simpara></listitem></varlistentry>
    <varlistentry><term>Unknown Sizes</term><listitem><para>
      This controls what SQLDescribeCol and SQLColAttributes will return as to
      precision for the <emphasis>variable</emphasis> data types when the
      precision (for example for a column) is unspecified.
      For the recommended <literal>sql_enforce_strict_size mode</literal>, this
      stting will have no effect.
      <itemizedlist>
        <listitem><simpara>
          Maximum: Always return the maximum precision of the data type.
        </simpara></listitem><listitem><simpara>
          Dont Know: Return "Don't Know" value and let application decide.
        </simpara></listitem><listitem><simpara>
          Longest: Return the longest string length of the column of any row. Beware of this setting when using cursors because the cache size may not be a good representation of the longest column in the cache.
        </simpara></listitem>
      </itemizedlist>
      MS Access: Seems to handle Maximum setting ok, as well as all the others.
      Borland: If sizes are large and lots of columns, Borland may crash badly
      (it doesn't seem to handle memory allocation well) if using Maximum size. 
      </para></listitem></varlistentry>
    <varlistentry><term>Max Varchar</term><listitem><simpara>
      Use this setting only as a work-around for client app idiocy.
      Generally, the database should enforce your data constraints.
      </simpara><simpara>
      The maximum precision of the VARCHAR and CHAR types (perhaps others).
      Set to 1 larger than the value you need, to allow for null terminator
      characters.
      <remark>
        The default is 255 right now.
        0 really means max of 0, and we need to change this ASAP so that 0
        will mean unlimited.
      </remark>
      </simpara><simpara>
        If you set this value higher than 254, Access will not let you index
        on varchar columns!
    </simpara></listitem></varlistentry>
    <varlistentry><term>Cache Size</term><listitem><simpara>
      When using cursors, this is the row size of the tuple cache. If not using cursors, this is how many tuples to allocate memory for at any given time. The default is 100 rows for either case.
    </simpara></listitem></varlistentry>
    <varlistentry><term>Max LongVarChar</term><listitem><simpara>
       The maximum precision of the LongVarChar type. The default is 4094 which actually means 4095 with the null terminator. You can even specify (-4) for this size, which is the odbc SQL_NO_TOTAL value.
     </simpara></listitem></varlistentry>
    <varlistentry><term>ReadOnly</term><listitem><simpara>
       Whether the datasource will allow updates.
    </simpara></listitem></varlistentry>
    <varlistentry><term>Show System Tables</term><listitem><simpara>
      The driver will treat system tables as regular tables in SQLTables. This is good for Access so you can see system tables.
    </simpara></listitem></varlistentry>
    <varlistentry><term>LF &lt;-&gt; CR/LF conversion</term><listitem><simpara>
      Convert Unix style line endings to DOS style.
    </simpara></listitem></varlistentry>
    <varlistentry><term>Updatable Cursors</term><listitem><simpara>
      Enable updateable cursor emulation in the driver.
      <remark>Fred will be implementing real Updatable ResultSets</remark>.
    </simpara></listitem></varlistentry>
    <varlistentry><term>Row Versioning</term><listitem><simpara>
      <remark>
        Will turn on MVRCC currency control mode, once we implement this.
      </remark>
    </simpara></listitem></varlistentry>
    <varlistentry><term>True is -1</term><listitem><simpara>
      Represent TRUE as -1 for compatibility with some applications.
    </simpara></listitem></varlistentry>
    <varlistentry><term>Int8 As</term><listitem><simpara>
      Define what datatype to report int8 columns as.
    </simpara></listitem></varlistentry>
    <varlistentry><term>Extra Opts</term><listitem><para>
      Extra Opts: combination of the following bits.
      <itemizedlist>
        <listitem><simpara>
          0x1: Force the output of short-length formatted connection string. Check this bit when you use MFC CDatabase class.
        </simpara></listitem>
        <listitem><simpara>
          0x2: Fake MS SQL Server so that MS Access recognizes PostgreSQL's serial type as AutoNumber type.
        </simpara></listitem>
        <listitem><simpara>
          0x4: Reply ANSI (not Unicode) char types for the inquiries from applications. Try to check this bit when your applications don't seem to be good at handling Unicode data.
        </simpara></listitem>
      </itemizedlist>
    </para></listitem></varlistentry>
    <varlistentry><term>OID Options</term><listitem><para>
      <itemizedlist>
        <listitem><simpara>
          Show Column: Includes the OID in SQLColumns. This is good for using as a unique identifier to update records if no good key exists OR if the key has many parts, which blows up the backend.
        </simpara></listitem>
        <listitem><simpara>
          Fake Index: This option fakes a unique index on OID. This is useful when there is not a real unique index on OID and for apps which can't ask what the unique identifier should be (i.e, Access 2.0).
        </simpara></listitem>
      </itemizedlist>
    </para></listitem></varlistentry>
    <varlistentry><term>OID Options</term><listitem><para>
      Level of rollback on errors: Specifies what to rollback should an error occur.
      <itemizedlist>
        <listitem><simpara>
       
          Nop(0): Don't rollback anything and let the application handle the error.
        </simpara></listitem>
        <listitem><simpara>
          Transaction(1): Rollback the entire transaction.
        </simpara></listitem>
        <listitem><simpara>
          Statement(2): Rollback the statement.
        </simpara></listitem>
      </itemizedlist>
      default value is a sentence unit (it is a transaction unit before 8.0).
    </para></listitem></varlistentry>
    <varlistentry><term>Connection Settings</term><listitem><simpara>
      The driver sends these commands to the backend upon a successful connection.  It sends these settings AFTER it sends the driver "Connect Settings". Use a semi-colon (;) to separate commands. This can now handle any query, even if it returns results. The results will be thrown away however!
    </simpara></listitem></varlistentry>
  </variablelist>
</chapter>
