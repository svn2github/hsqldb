$Id$

LO Work.  Most in convert.c.  Turn Debug up to 2 and check the inolog() entries
from the following functions.

Wipe out lobj.[ch].  This only handles lob transfers with the server using
connection:CC_send_function(), which is extremely server-specific.
Does not make sense to implement the server-side from scratch to accommodate
the client.  Better to do implement lobj tranfers from scratch, designing as
suits our own server and client.  If these transfers should allowed for
interspersed byte transfers, may need to allocate dedicated socket connections
for each lob xfer.
The methods below need to be re-designed to access our new methods instead of
CC_send_function().

BuildBindRequest()
    ResolveOneParam():
        Seems to contain the BLOB write code.

convert_lo():
    Looks like this is for handling client BLOB Reads: converting data on
     input stream to SQL_C_CHAR or SQL_C_BINARY.
    Should be called for server-side type of BLOB and conditionally VARBINARY.
    Creates file descriptor build on the connection stream: odbc_lo_open().

------------------------------------------------------------------------------

    FakeOidIndex: Yes|No
    ShowOidColumn: Yes|No
    I don't know much about OID/Rowid usage in ODBC.

    [Parse, not shown in Gui:  It's possible that Fred may want to implement
    this]

LOGGING

    Debug = 1.  To write mylog() messages to the MyLog file.
    Debug = 2.  To write both mylog() and inolog() messages to MyLog file.
    CommLog = 1.  To write qlog() messages to the CommLog.

------------------------------------------------------------------------------


CURSOR FUNCTIONALITY
Most "cursor" functionality is handled internal in client-side code
that we probably don't need to touch.  The low-leve code works with local
cursor names like "SQL_CUR0x4020d0e0".  For testing with prepared and
non-prepared queries, the string "cursor" (case-insensitive) is not going
over the wire.  There is only one occurrence of a statement with "cursor"
in the driver source code.  convert.c:
        if (SC_is_fetchcursor(stmt))
        {
            sprintf(new_statement, "%sdeclare \"%s\"%s cursor%s for ",
                new_statement, SC_cursor_name(stmt), opt_scroll, opt_hold);

The driver setting "Use Declare/Fetch" implies that it conditionally issues
DECLARE...CURSOR commands
.  Though I may not see it on the wire because
the feature may be off, I should see CURSOR strings in the C code.
Contrary to the results of my code search, the driver setting

SERVER-SIDE PREPARES
Could mean either the EXTENDED mode commands, or the Postresql SQL commands
"PREPARE/EXECUTE/DEALLOCATE".


The win32 build does use the DTS library.

SSPI.  This is for a very proprietary Microsoft SSL service.
But, judging by the ifdefs in connection.c, sspi is require even on the UNIX
client in order to have SSL ability????


ws2_32.dll interceptor may be useful for debugging the Windows driver.
    http://codemagnet.blogspot.com/2007/10/winsock2-replacement.html , but it
    doesn't include the functions I need.


Settings
   Turn USE_SSPI Off!
   Turn NOT_USE_LIBPQ On!  (to disable libpq)
   Disable SSL temporarily until we get it working again, on UNIX use the
    configure "--disable-openssl" switch.

We have SSL disabled for now, because it was dependent upon SSPI and
libpq, and we want to use neither of them.
