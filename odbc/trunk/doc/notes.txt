$Id$

RUNTIME SETTINGS

ODBC does not allow an empty string for a DSM database name.  Therefore,
you must specify DSN database name of "/" (without the quotes) to indicate
the default database


(The settings marked with * below are on by default).

Disable

    RowVersioning: No.
    Deprecated because Implementation is Postgresql-specific.
    Fred may re-implement.

Enable

    UniqueIndex*: 1
    (just a guess)  Dialog code says default is "1   /* don't recognize */"
    Seems to be saying that the default is on and it is off.

Special

    TextAsLongVarchar  0  Currently unused.  We may use this to switch some
    HyperSQL data type to LongVarchar to satisfy some client programs.

    UnknownSizes may be useful until we start passing column precision/sizes
    from the server.  After that, we don't want this setting.  Default -1???

    MaxVarcharSize seems to only be desirable as a client app idiocy workaround.

    UpdateableCursors  0/1.  This is pseudo client cursor caching.
     I think Fred is going to implement the real thing.

    ByteaAsLongVarBinary: 0.  ?  Don't have LOs working yet.

    FakeOidIndex: Yes|No
    ShowOidColumn: Yes|No
    I don't know much about OID/Rowid usage in ODBC.

    CancelAsFreeStmt.  ? Undocumented.

    [Parse, not shown in Gui:  It's possible that Fred may want to implement
    this]

LOGGING

    Debug = 1.  To write mylog() messages to the MyLog file.
    Debug = 2.  To write both mylog() and inolog() messages to MyLog file.
    CommLog = 1.  To write qlog() messages to the CommLog.

------------------------------------------------------------------------------


CURSOR FUNCTIONALITY
Most "cursor" functionality is handled internal in client-side code
that we probably don't need to touch.  The low-leve code works with local
cursor names like "SQL_CUR0x4020d0e0".  For testing with prepared and
non-prepared queries, the string "cursor" (case-insensitive) is not going
over the wire.  There is only one occurrence of a statement with "cursor"
in the driver source code.  convert.c:
        if (SC_is_fetchcursor(stmt))
        {
            sprintf(new_statement, "%sdeclare \"%s\"%s cursor%s for ",
                new_statement, SC_cursor_name(stmt), opt_scroll, opt_hold);

The driver setting "Use Declare/Fetch" implies that it conditionally issues
DECLARE...CURSOR commands
.  Though I may not see it on the wire because
the feature may be off, I should see CURSOR strings in the C code.
Contrary to the results of my code search, the driver setting

SERVER-SIDE PREPARES
Could mean either the EXTENDED mode commands, or the Postresql SQL commands
"PREPARE/EXECUTE/DEALLOCATE".


The win32 build does use the DTS library.

SSPI.  This is for a very proprietary Microsoft SSL service.
But, judging by the ifdefs in connection.c, sspi is require even on the UNIX
client in order to have SSL ability????


ws2_32.dll interceptor may be useful for debugging the Windows driver.
    http://codemagnet.blogspot.com/2007/10/winsock2-replacement.html , but it
    doesn't include the functions I need.


Settings
   Turn USE_SSPI Off!
   Turn NOT_USE_LIBPQ On!  (to disable libpq)
   Disable SSL temporarily until we get it working again, on UNIX use the
    configure "--disable-openssl" switch.

We have SSL disabled for now, because it was dependent upon SSPI and
libpq, and we want to use neither of them.


UUIDs for Wix were generated using the perl module Data::UUID, with
namespace "hsqlodbc" and "name" identifying the object being named,
like "hsqlodbc_files" or "product".
