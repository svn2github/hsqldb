$Id$

Fix headers to most source files, which reference non-existent "notice.txt"
file.

Update license text file, which has obsolete FSF address.

connection.c:getParamValues() does the same exact SOCK_get_string in
all 5 or 6 if/else blocks.  Replace with single command.

Abort processing at
connection.c:CC_send_query_append(), op switch for op 'Z'.
This state is very likely to result in deadlock.

Abort processing at 
socket.c:SOCK_get_id(), the sock-reslen > 0 block ("has to eat...").
This is a serious comm error and should not be ignored.

Rename the *packet_build() functions so they are not misleading.  They do not
just build packets, but perform transmissions.

Need to get a unique code/number for our driver's product/service for use with
the Windows MSI installer.  Procedure is documented in the Wix tutorial, I
think.  (Looks like it may be the Package Id in the *.wxs files).

Move output directories out of the "src" branch, for both UNIX and Windows.


ELIMINATE CODE FOR FOLLOWING CAPABILITIES, WHICH WE WILL NEVER NEED.
    [PGAPI stuff does apply to us.  Don't confuse this with libpq.]
    Add code to remove conditional sets and checks for the following features,
     or at least add validation so nothing accidentally runs thinking any of
     these features is on.
    libpq  (PostgreSQL-specific C API).  NOT_USE_LIBPQ true.
     (Judging by the ifdefs in connection.c, sspi is require even on the UNIX
     client in order to have SSL ability????)
    Any version-specific code for protocols other than PG_PROTOCOL_74.  All
     tests for versions after/greater something apply to us, since we are
     using the latest protocol.
    Function call stuff.  Both PostgreSQL-specific, and legacy.
    Non- conninfo[_]->use_server_side_prepare, since we always use server-side
     prepares.
    use_declarefetch usage. (based on "Use Declare/Fetch" driver setting.
     DECLARE/FETCH/MOVE/CLOSE commands needed to support this.
