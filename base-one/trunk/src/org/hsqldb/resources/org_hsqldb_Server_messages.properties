# Sample ResourceBundle properties file
server.help = Usage: java org.hsqldb.Server [-options]\n\
\n\
+----------------+------------+----------+------------------------------+\n\
|    OPTION      |    TYPE    | DEFAULT  |         DESCRIPTION          |\n\
+----------------+------------+----------+------------------------------|\n\
| -?             | --         | --       | prints this message          |\n\
| -address       | name       | any      | server inet address          |\n\
| -port          | number     | 9001/544 | port at which server listens |\n\
| -database      | path       | test     | name of the database         |\n\
| -silent        | true|false | true     | false => display all queries |\n\
| -trace         | true|false | false    | display JDBC trace messages  |\n\
| -tls           | true|false>| false    | TLS/SSL (secure) sockets     |\n\
| -no_system_exit| true|false | false    | do not issue System.exit()   |\n\
+----------------+------------+----------+------------------------------+\n\
\n\
The server looks for a server.properties file in the current directory and\n\
loads properties from it if it exists. Command line options override those\n\
loaded from the server.properties file.\n\
\n\
The default port is 9001 if tls is false and 544 if it is true.\n\
When omitted, the value of tls is true iff the system property:\n\
\n\
    \tjavax.net.ssl.keyStore\n\
\n\
is defined. An example command line invocation might look like:\n\
\n\
    \tjava -Djavax.net.ssl.keyStore=x -Djavax.net.ssl.keyStorePassword=y org.hsqldb.Server [-options]\n\
\n\
For information on secure sockets, see: http://java.sun.com/products/jsse/
webserver.help= Usage: java org.hsqldb.WebServer [-options]\n\
\n\
+----------------+------------+------------+------------------------------+\n\
|    OPTION      |    TYPE    |  DEFAULT   |         DESCRIPTION          |\n\
+----------------+------------+------------+------------------------------|\n\
| -?             | --         | --         | prints this message          |\n\
| -address       | name       | any        | server inet address          |\n\
| -port          | number     | 80/443     | port at which server listens |\n\
| -database      | name       | test       | name of the database         |\n\
| -root          | path       | ./         | path to web root             |\n\
| -default_page  | file       | index.html | default web page             |\n\
| -silent        | true|false | true       | false => display all queries |\n\
| -trace         | true|false | false      | display JDBC trace messages  |\n\
| -tls           | true|false |            | HTTPS (secure) sockets       |\n\
| -no_system_exit| true|false | false      | do not issue System.exit()   |\n\
+----------------+------------+------------+------------------------------+\n\
\n\
The server looks for a webserver.properties file in the current directory and\n\
loads properties from it if it exists. Command line options override those\n\
loaded from the webserver.properties file.\n\
\n\
The default port is 80 if tls is false and 433 if it is true.\n\
When omitted, the value of tls is true iff the system property:\n\
\n\
    \tjavax.net.ssl.keyStore\n\
\n\
is defined. An example command line invocation might look like:\n\
\n\
    \tjava -Djavax.net.ssl.keyStore=x -Djavax.net.ssl.keyStorePassword=y org.hsqldb.WebServer [-options]\n\
\n\
For information on secure sockets, see: http://java.sun.com/products/jsse/
online.help=To close normally, connect and execute SHUTDOWN SQL\n\
From command line, use [Ctrl]+[C] to abort abruptly
