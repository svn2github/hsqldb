<!-- $Id: sqltool.xml,v 1.6 2004/04/20 18:35:56 unsaved Exp $ -->

<chapter>
    <title>SqlTool</title>
    <subtitle>SqlTool Manual and HOWTO</subtitle>
    <chapterinfo>
        <author>
            <firstname>Blaine</firstname><surname>Simpson</surname>
            <email>&blaineaddr;</email>
            <affiliation>
                <orgname>HSQLDB Development Group</orgname>
            </affiliation>
        </author>
        <edition>$Revision: 1.6 $</edition>
        <pubdate>$Date: 2004/04/20 18:35:56 $</pubdate>
        <keywordset>
            <keyword>HSQLDB</keyword>
            <keyword>HOWTO</keyword>
            <keyword>SQL</keyword>
            <keyword>JDBC</keyword>
        </keywordset>
    </chapterinfo>

    <section>
        <title>Purpose</title>
        <para>
            This document explains how to use SqlTool, a program which 
            reads your SQL text file or stdin, and executes the SQL 
            commands therein against a JDBC database.
        </para><para>
            If this document comes from a hsqldb distribution, then it 
            covers the version of SqlTool bundled in this distribution.
            Otherwise, this document applies to the version of SqlTool 
            which ships with hsqldb version 1.7.2.
        </para>
    </section>

    <section>
        <title>The Bare Minimum You Need to Know to Run SqlTool</title>
        <titleabbrev>The Bare Minimum</titleabbrev>
        <para>
            If you want to use SqlTool, then you either have an SQL text file, 
            or you want to interactively type in SQL commands.
            If neither case applies to you, then you are looking at the wrong 
            program.
        </para><para>
            To run SQLTool...
        </para>
            <procedure>
                <step><para>
                    Copy <ulink url='sqltool.rc'/> to your home directory and
                    secure access to it if your home directory is accessible
                    to anybody else.
                    This file will work as-is if your target hsqldb Server is
                    running on your local computer with default settings,
                    and the password for the "sa" account is blank
                    (the sa password is blank when new hsqldb database 
                    instances are created).
                    Edit the file if you need to change the target Server URL, 
                    username, password, character set, or JDBD driver,
                    as documented in the 
                    <link linkend='auth-section' endterm='auth-title'/> section.
                </para></step><step><para>
                    Set up your CLASSPATH to include the classes
                    <literal>org.hsqldb.util.SqlTool</literal>,
                    <literal>org.hsqldb.util.SqlFile</literal>, and the 
                    JDBC driver that you want to use.  If you are using a 
                    hsqldb database, this is most easily accomplished by
                    setting (and exporting) CLASSPATH to the path to 
                    <filename>hsqldb.jar </filename> (which lives in the 
                    <filename>lib</filename> subdirectory of the hsqldb 
                    distribution).  (You can, of course, use a classpath 
                    argument to java instead of setting your CLASSPATH 
                    variable).
                </para></step><step><para>
                    Run 
                </para><informalexample><screen>
    java org.hsqldb.util.SqlTool --help</screen>
                </informalexample><para>
                    to see what command-line arguments are available.
                    Assuming that you set up your SqlTool configuration file 
                    at the default location and you want to use the hsqldb 
                    JDBC driver, you will want to run either
                </para><informalexample><screen>
    java org.hsqldb.util.SqlTool localhost-sa</screen>
                </informalexample><para>
                    for interactive use, or
                </para><informalexample><screen>
    java org.hsqldb.util.SqlTool --noinput --sql 'SQL statement;' localhost-sa</screen>
                    </informalexample><para>
                    or
                    </para><informalexample><screen>
    java org.hsqldb.util.SqlTool localhost-sa filepath1.sql...</screen>
                    </informalexample><para>
                    where <literal>localhost-sa</literal> is an
                    <emphasis>urlid</emphasis>,
                    and the following arguments are paths to text SQL files.
                    For the filepaths, you can use whatever wildcards your 
                    operating system shell supports.
                    </para><para>
                    The <emphasis>urlid</emphasis> <literal>localhost-sa
                    </literal>in these commands is a key 
                    into your SqlTool configuration file, as explained in the 
                    <link linkend='auth-section' endterm='auth-title'/> section.
                </para></step>
            </procedure>
        <para>
            To use a JDBC Driver other than the hsqldb driver, you must put 
            the jar/zip file in the classpath (as explained in number 2 above), 
            and you must tell SqlTool what the JDBC driver class name is.
            The latter can be accomplished by either using the "--driver" 
            switch, or setting "driver" in your config file.
            The <link linkend='auth-section' endterm='auth-title'/> section.
            explains the second method.  Here's an example of the first method.
        </para><informalexample><screen>
        java org.hsqldb.util.SqlTool --driver oracle.jdbc.OracleDriver urlid</screen>
        </informalexample>
    </section>

    <section id='auth-section'>
        <title id='auth-title'>Authentication Setup</title>
        <para>
            Authentication setup is accomplished by creating a text SqlTool
            configuration file.
            In this section, when I say <emphasis>configuration</emphasis>
            or <emphasis>config</emphasis> file, I mean an SqlTool 
            configuration file (aka SqlTool RC file).
        </para><para>
            Here is a <ulink url='sqltool.rc'>sample sqltool.rc file</ulink>.
        </para><para>
            You can put this file anywhere you want to, and specify the 
            location to SqlTool by using the "--rcfile" argument.
            If there is no reason to not use the default location (and there 
            are situations where you would not want to), then use the default
            location and you won't have to give "--rcfile" arguments to 
            SQLTool.
            The default location is <emphasis>sqltool.rc</emphasis> in your 
            home directory.
            If you have any doubt about where that is, then just run SqlTool 
            with a phoney urlid and it will tell you where it expects the 
            configuration file to be.
        </para><informalexample><screen>
    java org.hsqldb.util.SqlTool x</screen>
        </informalexample><para>
            The config file consists of stanza(s) like this:
        </para><informalexample><screen>
    urlid web
    url jdbc:hsqldb:hsql://localhost
    username web
    password webspassword</screen>
        </informalexample><para>
            These four settings are required for every urlid.
            (There are optional settings also, which are described a couple 
            paragraphs down).
            You can have as many blank lines and comments like
        </para><informalexample><screen>
    # This comment</screen>
        </informalexample><para>
        </para><para>
            in the file as you like.
            The whole point is that the <emphasis>urlid</emphasis> that you 
            give in your SqlTool command must match a <emphasis>urlid
            </emphasis> in your configuration file.
        </para><important><para>
            Use whatever facilities are at  your disposal to protect your 
            configuration file.
        </para></important><para>
            It should be readable, both locally and remotely, only to users 
            who need to use the records in it to run SqlTool.
            On UNIX, this is easily accomplished by using <literal>chmod/chown
            </literal> commands and making sure that it is protected from 
            anonymous remote access (like via NFS, FTP or Samba).
        </para><para>
            You can also put the following optional settings into a urlid 
            stanza.  The setting will, of course, only apply to that urlid.
        </para>
        <variablelist>
            <varlistentry><term>charset</term><listitem><para>
                Sets encoding character set for input.
                See the <link linkend='charencoding-section'
                    endterm='charencoding-title'/> section of the
                <link linkend='nonint-section' endterm='nonint-title'/>
                section.
                You can, alternatively, set this for one SqlTool invocation 
                by setting the system property <literal>sqltool.charset
                </literal>.
                Defaults to <literal>US-ASCII</literal>.
            </para></listitem></varlistentry>
            <varlistentry><term>driver</term><listitem><para>
                Sets the JDBC driver class name.
                You can, alternatively, set this for one SqlTool invocation 
                by using the SqlTool switch <emphasis>--driver</emphasis>.
                Defaults to <emphasis>org.hsqldb.jdbcDriver</emphasis>.
            </para></listitem></varlistentry>
        </variablelist>
        <para>
            Property and SqlTool command-line switches override settings made 
            in the configuration file.
        </para>
    </section>

    <section>
        <title>Interactive</title>
        <para>
            You run SqlTool interactively by specifying no SQL filepaths on 
            the SqlTool command line.  Like this.
        </para><informalexample><screen>
    java org.hsqldb.util.SqlTool urlid</screen>
        </informalexample><para>
            If it starts up and connects to the database (as specified in your
            SqlTool configuration file as explained in the
            <link linkend='auth-section' endterm='auth-title'/> section),
            you will be shown a banner describing the 
            different command types that you can give, as well as commands to 
            list all of the specific commands available to you.
        </para><para>
            You exit your session by using the "\q" special command or ending 
            input (like with Ctrl-D or Ctrl-Z).
        </para>
        <variablelist><title>Command types</title>
            <varlistentry><term>SQL Statement</term><listitem><para>
                Any command that you enter that does not begin with "\" or ":" 
                is a SQL Statement.
                The command is not terminated when you hit enter, like most 
                OS shells.
                You terminate SQL Statements with either ";" at the end of a 
                line, or with a blank line.
                In the former case, the SQL Statement will be executed against 
                the SQL database and the command will go into the command 
                buffer and command history for editing or viewing later on.
                In the latter case (you end an SQL Statement with a blank 
                line), the command will go to the buffer and history, but 
                will not be executed (unless you later execute it from the 
                buffer).
            </para><para>
                As a result of these termination rules, whenever you are 
                entering text that is not a Special Command or Buffer Command, 
                you are always <emphasis>appending</emphasis> lines to an 
                SQL Statement.
                (If it's the first line, then you will be starting an SQL 
                Statement, or appending to an empty SQL Statement).
            </para></listitem></varlistentry>
            <varlistentry><term>Special Command</term><listitem><para>
                Run the command "\?" to list the Special Commands.
                All of the Special Commands begin with "\".
                You can't enter a Special Command if you have already typed 
                some line(s) of a SQL Statement, because the new line 
                containing the Special Command would just be interpreted as 
                another line in the SQL Statement.
                In this case, you just hit enter to clear the current SQL 
                Statement and send it off to the buffer (where you can ignore 
                it forever if you wish to).  I'll describe some of the most 
                useful Special Commands below.
            </para></listitem></varlistentry>
            <varlistentry><term>Buffer Command</term><listitem><para>
                Run the command ":?" to list the Special Commands.
                All of the Special Commands begin with ":".
                The text above about entering Special Commands if you have 
                already typed some line(s) of a SQL Statement applies equally 
                to Buffer Commands.
                Buffer commands operate upon the command "buffer", so that 
                you can edit and/or (re-)execute previously entered commands.
            </para></listitem></varlistentry>
        </variablelist>
        <variablelist><title>Essential Special Commands</title>
            <varlistentry><term>\?</term><listitem><para>
                help
            </para></listitem></varlistentry>
            <varlistentry><term>\dt</term><listitem><para>
                Lists available database tables.
                Works well for HSQLDB and for Oracle.
                Need user feedback about compatibility with other database 
                vendors.
            </para></listitem></varlistentry>
            <varlistentry><term>\s</term><listitem><para>
                Shows the command history.
                The command history will show a number (a negative number) 
                for each SQL Statement that has made it into the buffer so 
                fare (by either executing or entering a blank line).
                You can then use "\-" command (which is described next) to 
                retrieve commands from the history to work with.
                To list just the very last command, you would use the ":l" 
                buffer command to list the buffer contents, instead of this 
                command.
            </para></listitem></varlistentry>
            <varlistentry><term>\-[3]</term><listitem><para>
                Enter "\" followed by the command number from history, like
                "\-3".
                That command will be written to the buffer so that you can 
                execute it or edit it using buffer commands.
            </para></listitem></varlistentry>
        </variablelist>
        <para>
            N.b. that there are other useful Special Commands which you
            can list by running <literal>\?</literal>.
            I hava listed on the <emphasis>essential</emphasis> Special
            Commands here.
        </para>
        <para>
            Be aware that the <literal>\!</literal> Special Command does
            not work for external programs that read from standard input.
            You can not run graphical interactive programs, but not
            command-line interactive programs.
        </para>
        <variablelist><title>Buffer Commands</title>
            <varlistentry><term>:?</term><listitem><para>
                help
            </para></listitem></varlistentry>
            <varlistentry><term>:a</term><listitem><para>
                Enter append mode with the contents of the buffer as the 
                current SQL Statement.
                Things will be exacly like you typed in the command that is 
                in the buffer.
                Whatever line you type next will be appended to the SQL 
                Statement.
                You can, of course, execute the command by terminating a 
                line with ";", or send it back to the buffer by entering a 
                blank line.
            </para></listitem></varlistentry>
            <varlistentry><term>:l</term><listitem><para>
                List the current contents of the buffer.
            </para></listitem></varlistentry>
            <varlistentry><term>:;</term><listitem><para>
                Executes the current buffer against the database.
            </para></listitem></varlistentry>
            <varlistentry><term>:s/from string/to string/</term><listitem><para>
                Edits the current buffer.
                Don't use "/" if it occurs in either "from string" or "to 
                string".
                You can use any character that you want in place of "/", but 
                it must not occur in the from or to strings.
                Example
                </para><informalexample><screen>
    :s@from string@to string@</screen>
                </informalexample><para>
                All occurrences of the "from string" are substituted with "to 
                string".
                If the SQL Statement is multi-line, the substitution will 
                happen to all lines.
                (This easily be changed to accommondate editing only specific 
                lines of the buffer-- let me know if that would be useful to 
                you).
                </para><para>
                All occurrences of "$" in the "from string" and the "to string" 
                are treated as line breaks.
                For example, "from string" of
                "<literal>*$FROM mytable</literal>" would 
                actually look for occurrences of
                </para><informalexample><screen>
    "*
     FROM mytable"</screen>
                </informalexample><para>
                This is very useful, as it permits you to append to or prefix 
                to specific lines within a multi-line SQL Statement, like
                </para><informalexample><screen>
    :s/e)$/e) WHERE col1 is not null$/</screen>
                </informalexample><para>
                This command appends
                "<emphasis>WHERE col1 is not null</emphasis>" to the 
                line(s) which end with "e)".
                </para><para>
                The "to string" may be empty, in which case, occurrences of 
                the "from string" are just deleted.  For example
                </para><informalexample><screen>
    :s/this//</screen>
                </informalexample><para>
                would remove all occurrences of "this".
            </para></listitem></varlistentry>
        </variablelist>
    </section>

    <section><title>Raw mode</title>
        <para>
            If for some reason you want SqlTool to process your commands as 
            if it were reading an SQL file, i.e., without giving a login 
            banner or command prompts, and aborting upon failure by default, 
            then specify a SQL filepath of "-", like
        </para><informalexample><screen>
    java org.hsqldb.util.SqlTool urlid -</screen>
        </informalexample><para>
            You may want to do this if you are redirecting or tee-ing output 
            to a log file, and you don't want the user-interaction messages 
            ending up in the log file.
        </para>
    </section>

    <section id='nonint-section'>
        <title id='nonint-title'>Non-Interactive</title>
        <para>
            Read the <emphasis>Interactive</emphasis> section if you have not 
            already, 
            because much of what is in this section builds upon that.
            Even if your plans are to run SqlTool non-interactively, you 
            should really learn to run it interactively because it's such a 
            powerful debugging tool, and you can use it to prototype sql 
            scripts.
        </para>
        <section><title>Giving SQL on the Command Line</title>
            <para>
                If you just have a couple SQL commands to run, you can run them 
                directly from the comand-line or from a shell script without an 
                SQL file, like this.
            </para><informalexample><screen>
    java org.hsqldb.util.SqlTool --noinput --sql 'SQL statement;' urlid</screen>
            </informalexample><para>
                Since SqlTool executes SQL statements only when a statement 
                line is terminated with ";", you can only execute more than one 
                SQL statement this way if your OS shell has some mechanism to 
                pass linebreaks in arguments through to the target program.
                With any Bourne-compatible shell, you can include linebreaks in 
                the SQL statements like this.
            </para><informalexample><screen>
    java org.hsqldb.util.SqlTool --noinput --sql 'SQL statement;' urlid
        SQL statement number one;
        SQL statement
            number two;
        SQL statement three;
    ' urlid</screen>
            </informalexample><para>
                If you don't give the <literal>--noinput</literal> switch, then 
                after executing the given statements, an interactive session 
                will be started.
            </para><para>
                The <emphasis>--sql</emphasis> switch is very useful for 
                setting shell variables to the output of SQL Statements, like 
                this.
            </para>
            <informalexample><programlisting>
    # A shell script
    USERCOUNT=`java org.hsqldb.util.SqlTool --noinput --sql 'select count(*) from usertbl;' urlid` || {
        # Handle the SqlTool error
    }
    echo "There are $USERCOUNT users registered in the database."
    [ "$USECOUNT" -gt 3 ] &amp;&amp; {   # If there are more than 3 users registered
        # Some conditional shell scripting</programlisting></informalexample>
        </section>
        <section><title>SQL Files</title>
            <para>
                Just give paths to sql text file(s) on the command line after 
                the <emphasis>urlid</emphasis>.
            </para><para>
                Often, you will want to redirect output to a file, like
            </para><informalexample><screen>
    java org.hsqldb.util.SqlTool urlid filepath1.sql... > /tmp/log.sql 2>&amp;1</screen>
            </informalexample><para>
                (Skip the "2>&amp;1" if you're on Windows).
            </para><para>
                If you are viewing this document as an HTML document, then you 
                can right click on <ulink url='sample.sql'>this link</ulink>
                to download a sample sql file.
                (If you have a good web browser, you can view it now by left
                clicking on it).
                The sample contains SQL as well as Special Commands making good
                use of the Special Commands documented below.
            </para><para>
                If you want your SQL scripts optimally compatible among 
                multiple databases, then don't use any Special Commands.
                (If you do this, you will probably want a command-line option 
                to turn on continue-upon-error behavior.
                As I say below, email me if you need this).
            </para>
        </section>
        <section><title>Comments</title>
            <para>
                You can use comments of the form
                <literal>/* An sql comment */</literal>
                inside or outside of SQL Statements.
                You can also use <literal>--</literal> style SQL comments.
                <literal>/*...*/</literal> comments that are not intertwined 
                with non-comment SQL, and <literal>--</literal> always, are 
                sent to the database.
                Stand-alone <literal>/*...*/</literal> comments are just 
                dropped, to avoid unnecessary network traffic and cluttering of 
                command history.
            </para>
        </section>
        <section>
            <title>Special Commands and Buffer Commands in SQL Files</title>
            <para>
                Don't use Buffer Commands in your sql files, because they won't 
                work.
                Buffer Commands are for interactive use only.
            </para><para>
                Most Special Commands won't work in sql files, but the 
                following not only work, but were designed for use in sql files.
            </para>
            <variablelist>
                <varlistentry><term>\p [line to print]</term><listitem><para>
                    Print the given string to stdout
                </para></listitem></varlistentry>
                <varlistentry><term>\H</term><listitem><para>
                    Toggle HTML output mode.
                    If you redirect output to a file, this can make query 
                    output much easier to view.
                    For example,
                    </para><informalexample><screen>
    java org.hsqldb.util.SqlTool urlid filepath1.sql... > /tmp/log.html 2>&amp;1</screen>
                    </informalexample><para>
                </para></listitem></varlistentry>
                <varlistentry><term>\* [true|false]</term><listitem><para>
                    A "true" setting tells SqlTool to continue when errors are 
                    encountered.
                    The default for interactive use is to continue upon error, 
                    but the default for non-interactive use is to abort upon 
                    error.
                    With database setup scripts, I usually find it convenient 
                    to set "true" before deleting tables (so that things will 
                    continue if the tables aren't there), then set it back to 
                    false so that real errors are caught.
                    </para><para>
                    (I'm considering adding another command-line option to 
                    allow setting the initial continue-on-error behavior that 
                    way, because sql scripts written for other databases 
                    usually assume continue-on-error since most databases don't 
                    give you any ability to abort upon error.
                    Let me know if you need this ability.)
                </para></listitem></varlistentry>
            </variablelist>
        </section>
        <section><title>Getting Interactive Functionality with SQL Files</title>
            <para>
                Some script developers may run into cases where they want to 
                run with sql files but they want SqlTool's interactive behavior.
                For example, they may want to do command recall in the sql file,
                or they may want to log SqlTool's command-line prompts (which 
                are not printed in non-interactive mode).
                In this case, do not give the sql file(s) as an argument to 
                SqlTool, but pipe them in instead, like
            </para><informalexample><screen>
    java org.hsqldb.util.SqlTool urlid &lt; filepath1.sql &gt; /tmp/log.html 2&gt;&amp;1</screen>
            </informalexample><para>
                or
            </para><informalexample><screen>
    cat filepath1.sql... |
    java org.hsqldb.util.SqlTool urlid &gt; /tmp/log.html 2&gt;&amp;1</screen>
            </informalexample>
        </section>
        <section id='charencoding-section'><title id='charencoding-title'>
                Character Encoding</title>
            <para>
                SqlTool defaults to the US-ASCII character set (for reading).
                You can use another character set by setting the system 
                property <literal>sqltool.charset</literal>, like
            </para><informalexample><screen>
    java -Dsqltool.charset=UTF=8 org.hsqldb.util.SqlTool urlid filepath1.sql...</screen>
            </informalexample><para>
                You can also set this per urlid in the SqlTool configuration 
                file.
                See the <link linkend='auth-section' endterm='auth-title'/>
                section about that.
            </para>
        </section>
    </section>

    <section>
        <title>Web Application</title>
        <para>
            It wouldn't bee much trouble for me to make a web application 
            that uses SqlTool so that users can use a HTML text area field 
            to execute SQL Statements.
            I already have a war that does a similar thing with a different 
            technology.  So, email me at &authoraddr;
            if you would like me to assemble a war like this.
        </para>
    </section>
</chapter>
